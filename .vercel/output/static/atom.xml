<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/pretty-feed-v3.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Millie&apos;s Attic</title><description>Millie 的個人網站。在學習的道路上，試著將知識彙整成技術文章，並透過文字記錄自己的生活。</description><link>https://my-attic-millieqiuuuu.vercel.app/</link><item><title>2024/05/05 早秋咖啡 ☕</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/other/weekly-coffee-macho/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/other/weekly-coffee-macho/</guid><pubDate>Sun, 12 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;./cafe-macho.png&quot; alt=&quot;coffee macho&quot; /&gt;&lt;/p&gt;
&lt;p&gt;原本早上看天氣預報，很猶豫到底要不要出門，怕路上遇到大雨會很麻煩，但想了想禮拜六已經待在家一整天了，決定還是出門走走（畢竟我是個連續兩天待在家裡就會發霉的人）。&lt;/p&gt;
&lt;p&gt;小插曲是我還被 google 地圖 gank，前一天晚上查只要走 10 分鐘，所以我預計咖啡廳一開門就可以抵達，沒想到出門前再查就變成要走 16 分鐘，公車又剛好在我面前跑掉，當時真的覺得糟糕透頂。&lt;/p&gt;
&lt;p&gt;幸好咖啡廳彌的氛圍補了這些不美好，大家都專心在做自己的事情（真的很喜歡這種一起做事的感覺），日式炒麵好吃、紅茶好喝、冷氣溫度也恰到好處……唯一美中不足的是我明明要用電腦卻挑了吧台的位置，桌子深度不夠，所以一天下來手腕有點痛😮‍💨&lt;/p&gt;
&lt;p&gt;回家的時候特意走一條平常不會走的路，經過一間看起來很好吃的蛋塔店，原本打算下次再來買，但轉念一想都難得走到這裡了，乾脆今天就買來吃吃看吧，如果等到下次就不知道會是什麼時候了。&lt;/p&gt;
&lt;p&gt;旁邊還剛好有一間需要排隊的麵線臭豆腐專賣店，索性也買來當晚餐吃～感謝今天有決定要出門的自己，偶爾繞點遠路走到陌生的地方，就可以看見跟平常不一樣的風景、吃到沒吃過的美食🥹&lt;/p&gt;
</content:encoded><category>生活</category><author>Millie Qiu</author></item><item><title>Alien Stage ✨ 你以為是音樂選秀嗎？不，是殘酷的生死淘汰賽！</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/other/chatting-alien-stage/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/other/chatting-alien-stage/</guid><pubDate>Sat, 04 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;你喜歡看選秀節目嗎？ 如果是的話，不妨讓我帶你來瞭解一個由韓國繪師 VIVINOS 老師以及他的團隊打造的音樂企劃－－Alien Stage（異星舞台）。&lt;/p&gt;
&lt;h3&gt;前言（作者碎碎唸）&lt;/h3&gt;
&lt;p&gt;時間回溯到 2024 年 4 月初，身為重度推特使用者的我當時並不知道出於什麼原因，Tweet Lists 上經常出現跟「外星人舞台」有關的字眼，搭配一張看起來很有 &lt;strong&gt;CP 感&lt;/strong&gt;的截圖。&lt;/p&gt;
&lt;p&gt;如果單看直譯的名稱「外星人舞台」這幾個字，感覺就會出現很多黃黃綠綠又噁心的圖片，因為這麼膚淺的理由，雖然知道這個企劃的存在，但我並沒有深入探究下去。&lt;/p&gt;
&lt;p&gt;直到某天同樣是在推特河道上飄來了一個太太的貼文，瞬間引起了我的興趣：&lt;/p&gt;
&lt;p&gt;&amp;lt;blockquote class=&quot;twitter-tweet&quot;&amp;gt;&amp;lt;p lang=&quot;zh&quot; dir=&quot;ltr&quot;&amp;gt;十大美德&amp;lt;br&amp;gt;勇敢：我自己去看外星人舞台&amp;lt;br&amp;gt;樂觀：明天就會有人看外星人舞台&amp;lt;br&amp;gt;積極：我現在就看外星人舞台&amp;lt;br&amp;gt;溝通：要不要看外星人舞台&amp;lt;br&amp;gt;社交：我朋友也看外星人舞台&amp;lt;br&amp;gt;坦然：外星人舞台很好看&amp;lt;br&amp;gt;誠實：其實我看不懂外星人舞台&amp;lt;br&amp;gt;利他：提醒你官方有更新&amp;lt;br&amp;gt;自省：我應該再看一次外星人舞台&amp;lt;br&amp;gt;公正：你們全都要看外星人舞台&amp;lt;/p&amp;gt;— 😭@歐美翁A31 (@aaabbc543210) &amp;lt;a href=&quot;https://twitter.com/aaabbc543210/status/1779728525429555307?ref_src=twsrc%5Etfw&quot;&amp;gt;April 15, 2024&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt; &amp;lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;當時我的內心：「到底外星人舞台有什麼神奇的魅力，居然讓這位太太的精神狀態變得如此美麗？我太愛了，我要去查！」&lt;/p&gt;
&lt;p&gt;俗話說好奇心能掐死一隻貓，如果時間能夠退回那一天，&amp;lt;s&amp;gt;我寧願我永遠都不要入坑&amp;lt;/s&amp;gt;（？）&lt;/p&gt;
&lt;p&gt;先附上一篇寫得很好的補充教材：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dcard.tw/f/acg/p/255254687&quot;&gt;𝗔𝗹𝗶𝗲𝗻 𝗦𝘁𝗮𝗴𝗲🌠短短不到5分鐘，心痛到無法呼吸 ˖๋ ࣭ ⭑慎入⚠️推坑&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;簡單來說，這個企劃的世界觀是在講述地球已經毀滅了，外星人（世界民）成為宇宙的主宰，將倖存的人類小孩抓走當作寵物來豢養，變成所謂的「寵物人」。&lt;/p&gt;
&lt;p&gt;世界民會透過金錢交易來購買寵物人、送寵物人到專門培育音樂創作及歌唱技巧的才藝補習班。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./alien-stage-1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;長大後就會被派去參加「Alien Stage」，也就是本次企劃的核心。名義上是像演唱會一樣的音樂選秀節目，採 1v1 的PK 賽制，可以看出現場是如此的熱鬧非凡 👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./alien-stage-2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;除了贏的那方可以晉級，更殘酷的是輸的那方就會猶如被&lt;strong&gt;宣判死刑&lt;/strong&gt;，在舞台上當場處死！簡直就只是外星人看人類之間的互相競爭及的殺戮娛樂秀啊 😭&lt;/p&gt;
&lt;p&gt;也許在那個世界觀中，死了對他們來說也是種另類的解脫吧（只能這樣安慰自己 🥲）。&lt;/p&gt;
&lt;p&gt;本作中最大的看點，也是最令人揪心的部分，就是六位主角角色之間的愛恨情仇了。&lt;/p&gt;
&lt;p&gt;附上一張官方前幾天才更新、熱騰騰的參賽人員個人檔案：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./alien-stage-3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;不管你是喜歡 GL、BL 還是 BG，滿滿的 CP 在外星人舞台上通通都找得到！（只能說貴圈真亂啊，但我還是吃得很香）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./alien-stage-4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;角色之間幾乎沒有台詞對白，劇情都是透過歌曲的 MV 來呈現，全部看完花不到 30 分鐘，但後勁大概可以持續 30 天。&lt;/p&gt;
&lt;p&gt;如果你喜歡「BE」、「虐戀」等等題材，那就絕對不能錯過這個精彩的企劃！&lt;/p&gt;
&lt;p&gt;想看中文字幕的歌詞的話，可以到官方的 Bilibili 看，按照播放清單的順序看下去就可以了：&lt;a href=&quot;https://www.bilibili.com/video/BV1ag4y1W78U/?spm_id_from=333.999.section.playall&quot;&gt;合集·🌠 ALIEN STAGE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;題外話這是我最喜歡的一首歌：&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2cFnfD4iZzM?si=RT15FMZgH9zP3JlZ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;（IVAN 真的太會唱了，自帶哭腔的嗓音，真的把他內心的無助跟心碎表現得很到位QQ）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;附上官方的資訊：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.instagram.com/vivinos__?igsh=MWwycHpjZjc2aTJuaw%3D%3D&quot;&gt;IG&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://twitter.com/official_alnst?s=21&amp;amp;t=GacOwyspajom3oC_273nOQ&quot;&gt;推特&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://space.bilibili.com/1816400749?spm_id_from=333.337.search-card.all.click&quot;&gt;Bilibili&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;順帶一提，官方 B 站的投稿圖文裡，有更多老師的小短漫＆補充設定，如果深陷在坑裡想找糧吃的話，也可以到那塊大寶地去挖挖看 XD&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;以上，你也喜歡外星舞台嗎？歡迎留言跟我分享你最喜歡的一首歌＆你最喜歡的 CP 吧！
如果你是因為這篇文章才去看的，也可以回來告訴我看完後的心得感想唷～
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><category>閒聊</category><author>Millie Qiu</author></item><item><title>Daily Notes 3：preload、prefetch、preconnect 的差異及用法</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-3/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-3/</guid><pubDate>Tue, 05 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今天公司的前輩介紹了三種使用在 &lt;code&gt;link&lt;/code&gt; 標籤上的效能優化的方法，可以改變瀏覽器下載資源的優先度－－也就是先讓網站會用到的檔案「偷跑」，以免網站內容過多時會卡頓、loading 太久，以下簡單將重點稍微整理。&lt;/p&gt;
&lt;p&gt;&amp;lt;div style=&quot;width:480px&quot;&amp;gt;&amp;lt;iframe allow=&quot;fullscreen&quot; frameBorder=&quot;0&quot; height=&quot;320&quot; src=&quot;https://giphy.com/embed/u2wg2uXJbHzkXkPphr/video&quot; width=&quot;480&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;h2&gt;載入順序&lt;/h2&gt;
&lt;p&gt;一般來說，瀏覽器會先讀取 HTML 檔案，Render 出整個畫面的結構，當需要時再下載及讀取 CSS 及 JavaScript，一邊繼續渲染畫面，有時會讓使用者必須等待渲染過程中的空白畫面或閃現醜醜的純 HTML 架構。&lt;/p&gt;
&lt;h2&gt;Preload&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;preload&lt;/code&gt; 的作用是告訴瀏覽器在頁面初始化時&lt;strong&gt;優先載入一定會用到的資源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;preload&quot; as=&quot;script&quot; href=&quot;super-important.js&quot;&amp;gt;
&amp;lt;link rel=&quot;preload&quot; as=&quot;style&quot; href=&quot;critical.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中，&lt;code&gt;as&lt;/code&gt; 屬性用來定義需要提前加載的資源類型，舉個例子，假設我們指定 as 的值是 style，也就是把它當作 CSS 資源，則這份資源的優先度將被提升得更高。&lt;/p&gt;
&lt;p&gt;雖然 &lt;code&gt;as&lt;/code&gt; 這個屬性是可加可不加，但如果沒加的話瀏覽器還是會有警告提醒你，所以可以的話還是設定一下比較好。&lt;/p&gt;
&lt;h2&gt;Prefetch&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;prefetch&lt;/code&gt; 這個屬性是在告訴瀏覽器：「這資源我等等會用到，有空的話幫我先下載」。等瀏覽器閒置時先下載好的資源會被放在 cache 裡面，真正要使用時再拿出來讀取。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;/public/app.08343a72.js&quot; as=&quot;script&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;資源將會等頁面完全下載完以後，以 Lowest 優先度下載。通常使用的情境會是「確定使用者很常會點到」的其中一個頁面。&lt;/p&gt;
&lt;p&gt;又或者當今天有一個必須要顯示的圖片（例如 icon 等），想在即使沒有網路的情況下也能看到、不會破圖，也可以使用此方法！&lt;/p&gt;
&lt;h2&gt;Preconnect&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;preconnect&lt;/code&gt; 的作用是讓網站提前和第三方資源建立連線。比方說使用 google font 字體、拿取 Web API 資料等，讓瀏覽器提前知道我們將會跟這個網站連線。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以上就是這次簡單介紹三種前端效能優化方法，感謝閱讀 :D 如果想看更詳細的資料，可以看看下方的延伸閱讀 👇&lt;/p&gt;
&lt;p&gt;Reference：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7128400578467594248&quot;&gt;性能优化之 preload、prefetch、preconnect 的区别与使用&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.shubo.io/preload-prefetch-preconnect/&quot;&gt;[教學] Preload, Prefetch 和 Preconnect 的差異&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.debugbear.com/blog/resource-hints-rel-preload-prefetch-preconnect&quot;&gt;Browser Resource Hints: preload, prefetch, and preconnect&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://nitropack.io/blog/post/resource-hints-performance-optimization&quot;&gt;Preload, Preconnect, Prefetch: Improve Your Site&apos;s Performance with Resource Hints&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;有任何想法想分享或協助勘誤，歡迎留言交流指教！🧛‍♂️
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><category>Frontend</category><author>Millie Qiu</author></item><item><title>JS 變數宣告：淺談 var、let、const 的差異</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-js-var-let-const/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-js-var-let-const/</guid><pubDate>Tue, 05 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;會想寫這篇文的原因，是某天跟同事聊天的過程中，聊到在 JS 宣告變數時幾乎很少用到 &lt;code&gt;var&lt;/code&gt;，雖然知道這種宣告變數的方式跟 &lt;code&gt;let&lt;/code&gt;、&lt;code&gt;const&lt;/code&gt; 有差異，具體而言我卻說不出為什麼，只依稀記得跟作用域有關......。&lt;/p&gt;
&lt;p&gt;為了往後討論這個問題時，都能像個 JS 大師般侃侃而談，我回家後立刻將這題好好鑽研一番，也順便做了筆記，如果以後忘記了隨時都能拿出來複習 XD。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt; 以及 &lt;code&gt;const&lt;/code&gt; 都是在 JavaScript 用來做變數宣告的保留字，在 JavaScript 早期只有 &lt;code&gt;var&lt;/code&gt;，直到 ES6 時才加入了 &lt;code&gt;let&lt;/code&gt; 與 &lt;code&gt;const&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;這次，我將分別根據&lt;strong&gt;作用域&lt;/strong&gt;、&lt;strong&gt;用途&lt;/strong&gt;、以及&lt;strong&gt;提升&lt;/strong&gt;（Hoisting）等特性來說明它們的不同。&lt;/p&gt;
&lt;h1&gt;作用域的差別&lt;/h1&gt;
&lt;p&gt;什麼是作用域（Scope）？先來看看 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;MDN&lt;/a&gt; 的解釋：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current context of execution. The context in which values and expressions are “visible” or can be referenced. If a variable or other expression is not “in the current scope,” then it is unavailable for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果上面這段話你可以看得懂，那麼恭喜你，你的功力簡直比我還深厚（&amp;lt;s&amp;gt;誤&amp;lt;/s&amp;gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;簡單翻譯上面的定義：作用域是指一個值（value）或一個表達式（expression）使用上的&lt;strong&gt;有效範圍或可以被存取的範圍&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript 擁有以下三種作用域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;全域作用域（Global Scope）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函式作用域（Function Scope）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區塊作用域（Block Scope）（也是 ES6 發展出的新特性）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;一、全域作用域&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;是 JavaScript 作用域的最外層，定義在全域中的變數，能夠在程式碼中的任何地方被使用，本文的主角之一 &lt;code&gt;var&lt;/code&gt; 就具備全域作用域。&lt;/p&gt;
&lt;p&gt;當我們在一個文件的最外層使用 &lt;code&gt;var&lt;/code&gt; 來宣告變數，這時它的範圍會是全域，可以來看看下面的栗子🌰：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = &quot;我是全域變數&quot;;

function call() {
  console.log(a);
}

call(); // 我是全域變數
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一行在最外層用 &lt;code&gt;var&lt;/code&gt; 來宣告變數，因此變數 a 在函式裡面就可以被訪問到，也能順利印出「我是全域變數」這個字串。&lt;/p&gt;
&lt;h2&gt;二、函式作用域&lt;/h2&gt;
&lt;p&gt;亦即在函式中宣告的變數，有效作用範圍會被限制在該函式中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function scope() {
  let a = &quot;函式作用域&quot;;
  console.log(a);
}

scope(); // 函式作用域
console.log(a); // Uncaught ReferenceError: a is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們在函式內用 &lt;code&gt;let&lt;/code&gt; 宣告一個變數，呼叫函式時理所當然地能夠被印出；然而一旦在函式外面嘗試存取此變數（如第 7 行所示），便會執行失敗。&lt;/p&gt;
&lt;h2&gt;三、區塊作用域&lt;/h2&gt;
&lt;p&gt;被定義在一個由 &lt;code&gt;{}&lt;/code&gt; 大括號包起來的區塊，舉凡 if、for、switch、while 等等，都可以界定出作用範圍。&lt;/p&gt;
&lt;p&gt;要注意的是，&lt;strong&gt;只有&lt;/strong&gt; &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 定義的變數會屬於區塊作用域。&lt;/p&gt;
&lt;p&gt;來看底下這段範例，如果是使用 &lt;code&gt;var&lt;/code&gt; 來定義變數，程式碼中的變數 a 並不是在函式中定義的，所以會變為「全域變數」；然而如果是使用 &lt;code&gt;let&lt;/code&gt; 來宣告的變數 b，則無法在外部環境中取得。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (true) {
    var a = &quot;全域作用域&quot;;
    let b = &quot;區塊作用域&quot;;
}

console.log(a); // 全域作用域
console.log(b); // Uncaught ReferenceError: b is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 具備了全域作用域及函式作用域，&amp;lt;mark&amp;gt;但不具有區塊作用域，所以在區塊中宣告的變數，依然會作用到區塊之外，並不會被區塊限制住&amp;lt;/mark&amp;gt;。&lt;/p&gt;
&lt;h3&gt;補充：全域變數的汙染&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 3; i ++) {
    console.log(i);
}

console.log(window.i); // 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我們在 for 迴圈裡用 &lt;code&gt;var&lt;/code&gt; 來宣告變數 i ，則這個值也會被紀錄在 window 裡，變成一個全域變數，無形之中汙染到了全域變數。&lt;/p&gt;
&lt;h1&gt;用途的差別&lt;/h1&gt;
&lt;p&gt;不囉嗦，先上個程式碼當範例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var greeter = &quot;Hi :)&quot;;
var greeter = &quot;Say hello instead&quot;;

console.log(greeter); // Say hello instead
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以發現原本第一行的宣告的變數被覆蓋掉了，會造成這個結果是因為 &lt;code&gt;var&lt;/code&gt; 可以重複宣告。而 &lt;code&gt;let&lt;/code&gt; &lt;strong&gt;可以重新賦值，但不能重複宣告&lt;/strong&gt;，所以會如下面這樣：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let greeter = &quot;Hi :)&quot;;
let greeter = &quot;Say hello instead&quot;;

console.log(greeter);
// Uncaught SyntaxError: Identifier &apos;greeter&apos; has already been declared
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但如果換成下面這種方法就可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let greeter = &quot;Hi :)&quot;;
greeter = &quot;Say 你好 instead :)&quot;;

console.log(greeter); // Say 你好 instead :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至於 &lt;code&gt;const&lt;/code&gt;，是更嚴謹的宣告變數，其實 const 是常數「Constant」縮寫而來的，所以顧名思義 const 就是宣告常數的意思，無法被重新宣告、更無法被重新賦值哦！&lt;/p&gt;
&lt;h1&gt;提升（Hoisting）的差別&lt;/h1&gt;
&lt;p&gt;Hoisting 這個主題也是 JS 裡面數一數二困擾的，我也蠻感興趣的，正打算改天再另外寫一篇文來講解，因此這篇不會著墨太多 Hositing 的特性，如果想了解的也可以先看&lt;a href=&quot;https://blog.techbridge.cc/2018/11/10/javascript-hoisting/&quot;&gt;這篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前我們只需要知道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Javascript 在程式的編譯階段，會先把宣告的變數和函式放在程式的頂端，等到實際執行時在賦予其值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意這邊指的是一個概念上的提升，並不代表 JS 在編譯時會真的去更動程式碼的位置。&lt;/p&gt;
&lt;p&gt;其中又因為 &lt;code&gt;var&lt;/code&gt; 有著「提升」的特性，會造成以下這種弔詭的情況：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(i); // undefined
var i = 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;會印出 undefined 即是代表：雖然我們看不見，但其實在 &lt;code&gt;console.log(i)&lt;/code&gt; 之前，i 就已經被宣告了，只是尚未賦值。&lt;/p&gt;
&lt;p&gt;但是 &lt;code&gt;let&lt;/code&gt; 與 &lt;code&gt;const&lt;/code&gt; 則不會，而是會進到&lt;a href=&quot;https://www.freecodecamp.org/news/what-is-the-temporal-dead-zone/&quot;&gt;暫時死區 (TDZ)&lt;/a&gt;，因此在 &lt;code&gt;let&lt;/code&gt; 與 &lt;code&gt;const&lt;/code&gt; 宣告變數前使用該變數，會出現錯誤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(i);
let i = 5;
// Uncaught ReferenceError: Cannot access &apos;i&apos; before initialization
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;以上就是這次的「淺談 var、let 與 const 的差異」，希望會你們有幫助，也希望下次自己不要再忘記這些觀念了！&lt;/p&gt;
&lt;p&gt;Reference：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.explainthis.io/zh-hant/swe/what-is-scope-and-scope-chain&quot;&gt;Javascript 的作用域 (Scope) 與作用域鏈 (Scope Chain) 是什麼?&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript&quot;&gt;在 JavaScript 中用 var, let, 以及 const 有什麼差別？什麼時候該用哪個？&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.programfarmer.com/articles/2020/javascript-var-let-const-for-loop&quot;&gt;JS 宣告變數， var 與 let / const 差異&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.freecodecamp.org/chinese/news/javascript-var-let-and-const/&quot;&gt;JavaScript 中的 Var、Let 和 Const 有什么区别&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://hackmd.io/@bookbasketball/SJ1lqTzSt&quot;&gt;[JavaScript] 談var、let、const差異之var你這個矯情的賤人&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;有任何想法想分享或協助勘誤，歡迎留言交流指教！🐰
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><category>Frontend</category><author>Millie Qiu</author></item><item><title>Daily notes 2：什麼是 Callback function？</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-2/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-2/</guid><pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;本篇文章是我在 Udemy 上加強 JavaScript 基礎的學習筆記。&lt;br /&gt;
這兩小節的課程中，老師先介紹了「First-class Function」以及「Higher-order Function」的差別，接著再舉一段簡單的程式碼範例讓我們了解什麼是 &lt;strong&gt;Callback function&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;First-class Function&lt;/h1&gt;
&lt;p&gt;JavaScript 是擁有 First-class Function（一級函式）特性的程式語言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JS 將 function 當作一等公民&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將 function 視為是一種「值」（Value）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;function 是一種物件型態的資料（&lt;code&gt;typeOf function&lt;/code&gt; = Object）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於上面特殊的定義，我們也可以對 function 做許多對其他資料型別的變數也可以操作的行為，包含：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;將函式儲存成變數（透過 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function&quot;&gt;Function Expressions&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將函式儲存成一種物件的方法（Method）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;const counter = {
    value: 23;
    inc: function() {this.value ++}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;將 function 當作參數代入另一個函式中（最簡單的例子就是 &lt;code&gt;addEventListener&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在一個 function 中回傳（return）另一個 function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;擁有 function 自己的方法（例如 &lt;code&gt;bind&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也是因為 First-class Function 的特性，才讓我們能創造出並使用&lt;strong&gt;高階函式（Higher-Order Function）&lt;/strong&gt;。&lt;/p&gt;
&lt;h1&gt;Higher-Order Function&lt;/h1&gt;
&lt;p&gt;高階函式（Higher order function）是指當&amp;lt;mark&amp;gt;一個函式可以接受另一個函式作為參數&amp;lt;/mark&amp;gt;或者&amp;lt;mark&amp;gt;返回一個函式作為結果的函式&amp;lt;/mark&amp;gt;。&lt;/p&gt;
&lt;p&gt;第一個情況，我們以事件偵聽的例子（🌰）來說明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const greet = () =&amp;gt; console.log(&apos;Hello!&apos;);
btn.addEventListener(&apos;click&apos;, greet);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述的程式碼中，&lt;code&gt;addEventListener&lt;/code&gt; 接收了 &lt;code&gt;greet&lt;/code&gt; 函式作為參數，由此可知它就是所謂的&lt;strong&gt;高階函式&lt;/strong&gt;；而 &lt;code&gt;greet&lt;/code&gt; 函式則是我們後續會提到的 &lt;strong&gt;回呼函式&lt;/strong&gt;（Callback Function）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所謂的「Callback function」其實就是「把函式當作另一個函式（Higher-order Function）的參數，透過另一個函式來呼叫它」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二種情況的範例程式碼如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function count() {
    let counter = 0;
    return function() {
        counter++;
    }&apos;&apos;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;count&lt;/code&gt; 函式就是 Higher-order function，而被 return 的函式則是所謂的 &lt;strong&gt;Returned function&lt;/strong&gt;。不過 Returned function 的用法又更進階了，目前在這個小節並沒有被提到，會在其他篇作補充。&lt;/p&gt;
&lt;p&gt;看到這裡，有些人可能會疑惑，「First-class function」跟「Higher-order function」聽起來很類似，難道它們不是同一件事嗎？&lt;/p&gt;
&lt;p&gt;答案是......NO ❌！&lt;/p&gt;
&lt;p&gt;First-class function 只是&lt;strong&gt;一個特性&lt;/strong&gt;，代表「Function 是一個 Value」這個概念。不只 JS ，其他像是 Go、Python 等語言也都支持這個特性。&lt;/p&gt;
&lt;p&gt;然而 Higher-order function 則是在實際的程式碼中會出現的一種函式，而能夠實現這類函式的原因，就歸功於前面提到過的 First-class function 的存在。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Callback Function&lt;/h1&gt;
&lt;p&gt;以下用一段簡單的程式碼來帶大家瞭解什麼是「Callback function」：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 將字串的第一個單字轉換成大寫
const upperFirstWord = function (str) {
    const [first, ...others] = str.split(&apos; &apos;);
    return [first.toUpperCase(), ...others].join(&apos; &apos;);
}

// Higher-order function
const transformer = function (str, fn) {
    console.log(`Original string: ${str}`);
    console.log(`Transformed string: ${fn(str)}`);
    console.log(`Transformed by: ${fn.name}`);
}

// 呼叫 upperFirstWord 函式
transformer(&apos;JavaScript is the best!&apos;, upperFirstWord);

// 列印結果：
// Original string: JavaScript is the best!
// Transformed string: JAVASCRIPT is the best!
// Transformed by: upperFirstWord
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在第 14 行，我們呼叫 &lt;code&gt;transformer()&lt;/code&gt; 這個函式，它就是前面提到過的高階函式（Higher-order function），並在參數 fn 中代入 &lt;code&gt;upperFirstWord&lt;/code&gt; 函式，也就是所謂的 Callback function。&lt;/p&gt;
&lt;p&gt;我們並沒有直接呼叫 &lt;code&gt;upperFirstWord()&lt;/code&gt; 這個函式，而是將其作為參數傳遞，後續再讓 &lt;code&gt;transformer()&lt;/code&gt; 函式來呼叫它。&lt;/p&gt;
&lt;p&gt;透過上面的例子，也不難發現其實 &amp;lt;mark&amp;gt;Callback function 跟一般的函式沒什麼不同，差別在於被呼叫執行的時機&amp;lt;/mark&amp;gt;。&lt;/p&gt;
&lt;p&gt;在 JavaScript 的世界中，經常可以看到 Callback function 的用法。它給我們帶來以下幾點好處：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;幫助我們能更輕鬆地將程式碼分割成「&lt;strong&gt;可以重複使用&lt;/strong&gt;」（reusabel）以及「&lt;strong&gt;相互有關聯&lt;/strong&gt;」（interconnected）的段落。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;幫助我們實現「物件抽象化」（Abstraction）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抽象化（Abstraction）是物件導向程式設計（Object-Oriented Programming）的重要概念之一。簡單來說，指的是當程式執行時，能夠隱藏另一部分程式碼背後的運作的細節。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上方的範例來看，&lt;code&gt;tranformer()&lt;/code&gt; 函式在運作時，需要關注的事情就只有「能否順利將 input 中字串轉換成我們需要的格式」，因此並不在乎背後複雜的機制是如何將字串轉換成大寫的。&lt;/p&gt;
&lt;p&gt;在這邊先大略提一個概念，剩下的細節會在老師後面教到「物件導向程式語言」時再回來補充。&lt;/p&gt;
&lt;p&gt;不過需要注意的是，若 Callback function 的設計及使用不當，讓函式之間的相依過深，callback 多層之後產生的「波動拳」就會難以維護，形成所謂的「Callback hell」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./callback-hell.jpeg&quot; alt=&quot;Callback Hell Image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;可以說 Callback function 會是 JS 課程中數一數二重要的單元，老師在章節的末尾千交代萬囑咐一定要好好釐清當中的觀念，也是我這次覺得提筆做筆記的原因～✏&lt;/p&gt;
&lt;p&gt;希望這篇文能夠幫助到跟我一樣剛在學習的人，快速建立一個觀念，背後還有很多複雜的機制跟原理，就讓大家自行去挖掘囉！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Reference：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html&quot;&gt;[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式）&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://www.casper.tw/development/2020/09/24/first-class-function/&quot;&gt;JavaScript 一級函式 （First Class Functions）&lt;/a&gt; &amp;lt;br&amp;gt;
&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10192739&quot;&gt;重新認識 JavaScript: Day 18Callback Function 與 IIFE&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;有任何想法想分享或協助勘誤，歡迎留言交流指教！🏹
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><category>Frontend</category><author>Millie Qiu</author></item><item><title>Daily Notes 1：String in Modern JS</title><link>https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-1/</link><guid isPermaLink="true">https://my-attic-millieqiuuuu.vercel.app/posts/tech/frontend-daily-note-1/</guid><pubDate>Sun, 03 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;我目前加強 JavaScript 基礎的方式是 Udemy 上一堂由 Jonas Schmedtmann 老師開授的 &lt;a href=&quot;https://www.udemy.com/course/the-complete-javascript-course/&quot;&gt;The Complete JavaScript Course 2023: From Zero to Expert!&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;當時有趁著打折購入這門課，真的覺得很超值，老師將觀念講解得很詳細，對於課程編排（例如哪個部份應該先上、哪個部份的觀念要留到後面的章節再詳細補強）也有一套自己的原則，更新教學內容也很頻繁，因此不用擔心觀念落後的問題，我個人上得蠻開心的 XD&lt;/p&gt;
&lt;p&gt;推薦給對自己的英文能力有信心、不會聽到睡著，或想嘗試看看全英語授課的朋友囉～🙌&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;題目說明&lt;/h2&gt;
&lt;p&gt;今天做了一份老師在章節中穿插的 Coding Challenge，題目是將底下的格式的字串轉換成小駝峰 (low camel case) 格式，加上 ✅ Emoji，並移除每一列中不必要的空白字元：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;USer_nAme
Some_Variable
  calculate_AGE
----------------------
// 轉換成
userName       ✅
someVariables  ✅✅
calculateAge   ✅✅✅
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這份練習的目的是為了讓我們更熟練運用 String Methods，來看一下這題的解法以及我學到的東西。&lt;/p&gt;
&lt;h2&gt;解題方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;將整段字串依題目要求貼到 Textarea 裡，再分別取出每一列的內容，因此需要認識換行符號 &lt;code&gt;\n&lt;/code&gt; 及 &lt;code&gt;split()&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;const text = document.querySelector(&apos;textarea&apos;).value;
const rows = text.split(&apos;\n&apos;);
console.log(rows);
// [&apos;USer_nAme&apos;, &apos;Some_Variable&apos;, &apos;  calculate_AGE&apos;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;split()&lt;/code&gt; 的基本語法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;str.split([separator[, limit]])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;split() 結果返回一個&lt;strong&gt;字串陣列&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;參數 limit 是非必要的，表示最多返回幾個分隔字串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seperator 參數用來指定分隔符號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;利用 &lt;code&gt;for..of&lt;/code&gt; loop 讀取陣列中的每個元素，再透過 &lt;code&gt;toLowerCase()&lt;/code&gt;、&lt;code&gt;trim()&lt;/code&gt; 等方法整理格式。&lt;/p&gt;
&lt;p&gt;當收到字串型態的資料時，通常會先透過 &lt;code&gt;toLowerCase&lt;/code&gt; 將之轉換成小寫，能夠方便我們進行後續的整理；而 &lt;code&gt;trim()&lt;/code&gt; 方法能夠幫助我們移除字串中不必要的空白字元。&lt;/p&gt;
&lt;p&gt;到這個步驟為止，我們已經能成功將 Textarea 中的原始資料轉換成小駝峰格式了🎉！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;for (const [i, row] of rows.entries()) {
    const [first, second] = row.toLowerCase().trim().split(&apos;_&apos;); //解構賦值
    
    const output = `${first}${second.replace(
      second[0], 
      second[0].toUpperCase()
      )}`;

      console.log(output);
  }
// userName
// someVariable
// calculateAge
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最後，還需要在每一列尾加上 ✅ 的 Emoji，數量需隨著每列元素遞增，且可以發現每列的 Emoji 都會在同樣的位置長出來。&lt;/p&gt;
&lt;p&gt;我們要先讓前面的小駝峰字串都達到一樣的長度，聽起來有點抽象，但只要用 &lt;code&gt;padEnd()&lt;/code&gt; 方法就能實現。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;padEnd()&lt;/code&gt; method of String values pads this string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of this string. - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd&quot;&gt;MDN web docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;簡單來說，&amp;lt;mark&amp;gt;這個方法會幫助我們在字串末端填充特定的字符，直到字串達到我們指定的長度&amp;lt;/mark&amp;gt;。套用在題目上的話會變成：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;console.log(`${output.padEnd(20, &apos;&apos;)}${&apos;✅&apos;.repeat(i + 1)}`);
//userName              ✅
//someVariable          ✅✅
//calculateAge          ✅✅✅
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;📝 &lt;strong&gt;備註&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 output 的長度達到 20 以前，會不斷填充空白字元，如此一來最後 &lt;code&gt;output.lenght&lt;/code&gt; 的結果皆會等於 20。（與之相對應的也有 &lt;code&gt;padStart&lt;/code&gt; 方法，將重複的字符填充在最前面，可以到 &lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/padStart&quot;&gt;MDN&lt;/a&gt; 網站上看更詳細的說明。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再利用 &lt;code&gt;repeat()&lt;/code&gt; 方法重複印出 ✅ Emoji，就大功告成囉～ 完整的程式碼如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.querySelector(&apos;button&apos;).addEventListener(&apos;click&apos;, function() {
  const text = document.querySelector(&apos;textarea&apos;).value;
  const rows = text.split(&apos;\n&apos;);

  console.log(rows);

  for (const [i, row] of rows.entries()) {
    const [first, second] = row.toLowerCase().trim().split(&apos;_&apos;);
    
    const output = `${first}${second.replace(
      second[0], 
      second[0].toUpperCase()
      )}`;

      console.log(`${output.padEnd(20, &apos; &apos;)}${&apos;✅&apos;.repeat(i + 1)}`);
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;結語&lt;/h2&gt;
&lt;p&gt;以上簡短說明今天的練習題以及其中用到的小技巧！&lt;/p&gt;
&lt;p&gt;覺得自己寫文章的速度還是太慢了，希望未來能夠邊思考、整理思緒，一邊產出文章，才不會花太多時間在經營部落格上面。畢竟初衷是發表文章當作筆記，能夠好好練習程式碼的運用才是最重要的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Reference：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fooish.com/javascript/string/split.html&quot;&gt;JavaScript String split() (字串切割)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bobbyhadz.com/blog/javascript-typeerror-trim-is-not-a-function&quot;&gt;TypeError: trim is not a function in JavaScript[Solved]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;字串 - JavaScript | MDN&lt;/a&gt; - 查看更多字串的跳脫符號&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;有任何想法想分享或協助勘誤，歡迎留言交流指教！🦀
&lt;/code&gt;&lt;/pre&gt;
</content:encoded><category>Frontend</category><category>JavaScript</category><author>Millie Qiu</author></item></channel></rss>