import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_CAHbMDKa.mjs';

const html = "<p>我目前加強 JavaScript 基礎的方式是 Udemy 上一堂由 Jonas Schmedtmann 老師開授的 <a href=\"https://www.udemy.com/course/the-complete-javascript-course/\">The Complete JavaScript Course 2023: From Zero to Expert!</a>。</p>\n<p>當時有趁著打折購入這門課，真的覺得很超值，老師將觀念講解得很詳細，對於課程編排（例如哪個部份應該先上、哪個部份的觀念要留到後面的章節再詳細補強）也有一套自己的原則，更新教學內容也很頻繁，因此不用擔心觀念落後的問題，我個人上得蠻開心的 XD</p>\n<p>推薦給對自己的英文能力有信心、不會聽到睡著，或想嘗試看看全英語授課的朋友囉～🙌</p>\n<hr>\n<h2 id=\"題目說明\">題目說明</h2>\n<p>今天做了一份老師在章節中穿插的 Coding Challenge，題目是將底下的格式的字串轉換成小駝峰 (low camel case) 格式，加上 ✅ Emoji，並移除每一列中不必要的空白字元：</p>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>USer_nAme</span></span>\n<span class=\"line\"><span>Some_Variable</span></span>\n<span class=\"line\"><span>  calculate_AGE</span></span>\n<span class=\"line\"><span>----------------------</span></span>\n<span class=\"line\"><span>// 轉換成</span></span>\n<span class=\"line\"><span>userName       ✅</span></span>\n<span class=\"line\"><span>someVariables  ✅✅</span></span>\n<span class=\"line\"><span>calculateAge   ✅✅✅</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>這份練習的目的是為了讓我們更熟練運用 String Methods，來看一下這題的解法以及我學到的東西。</p>\n<h2 id=\"解題方法\">解題方法</h2>\n<ol>\n<li>將整段字串依題目要求貼到 Textarea 裡，再分別取出每一列的內容，因此需要認識換行符號 <code>\\n</code> 及 <code>split()</code> 方法。</li>\n</ol>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#BFBDB6\"> text </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> document</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">querySelector</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'textarea'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#F29668\">.</span><span style=\"color:#BFBDB6\">value</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#BFBDB6\"> rows </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> text</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">split</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'</span><span style=\"color:#95E6CB\">\\n</span><span style=\"color:#AAD94C\">'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(rows)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// ['USer_nAme', 'Some_Variable', '  calculate_AGE']</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>split()</code> 的基本語法：</p>\n<p><code>str.split([separator[, limit]])</code></p>\n<ul>\n<li>\n<p>split() 結果返回一個<strong>字串陣列</strong></p>\n</li>\n<li>\n<p>參數 limit 是非必要的，表示最多返回幾個分隔字串</p>\n</li>\n<li>\n<p>seperator 參數用來指定分隔符號</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>利用 <code>for..of</code> loop 讀取陣列中的每個元素，再透過 <code>toLowerCase()</code>、<code>trim()</code> 等方法整理格式。</p>\n<p>當收到字串型態的資料時，通常會先透過 <code>toLowerCase</code> 將之轉換成小寫，能夠方便我們進行後續的整理；而 <code>trim()</code> 方法能夠幫助我們移除字串中不必要的空白字元。</p>\n<p>到這個步驟為止，我們已經能成功將 Textarea 中的原始資料轉換成小駝峰格式了🎉！</p>\n</li>\n</ol>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF8F40\">for</span><span style=\"color:#BFBDB6\"> (</span><span style=\"color:#FF8F40\">const</span><span style=\"color:#BFBDB6\"> [i</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> row] </span><span style=\"color:#F29668\">of</span><span style=\"color:#BFBDB6\"> rows</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">entries</span><span style=\"color:#BFBDB6\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    const</span><span style=\"color:#BFBDB6\"> [first</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> second] </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> row</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">toLowerCase</span><span style=\"color:#BFBDB6\">()</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">trim</span><span style=\"color:#BFBDB6\">()</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">split</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'_'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span><span style=\"color:#ACB6BF8C;font-style:italic\"> //解構賦值</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    </span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    const</span><span style=\"color:#BFBDB6\"> output </span><span style=\"color:#F29668\">=</span><span style=\"color:#AAD94C\"> `</span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">first</span><span style=\"color:#FF8F40\">}${</span><span style=\"color:#BFBDB6\">second</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">replace</span><span style=\"color:#BFBDB6\">(</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      second[</span><span style=\"color:#D2A6FF\">0</span><span style=\"color:#BFBDB6\">]</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> </span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      second[</span><span style=\"color:#D2A6FF\">0</span><span style=\"color:#BFBDB6\">]</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">toUpperCase</span><span style=\"color:#BFBDB6\">()</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      )</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(output)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">  }</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// userName</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// someVariable</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// calculateAge</span></span>\n<span class=\"line\"></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>最後，還需要在每一列尾加上 ✅ 的 Emoji，數量需隨著每列元素遞增，且可以發現每列的 Emoji 都會在同樣的位置長出來。</p>\n<p>我們要先讓前面的小駝峰字串都達到一樣的長度，聽起來有點抽象，但只要用 <code>padEnd()</code> 方法就能實現。</p>\n<blockquote>\n<p>The <code>padEnd()</code> method of String values pads this string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of this string. - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\">MDN web docs</a></p>\n</blockquote>\n<p>簡單來說，<mark>這個方法會幫助我們在字串末端填充特定的字符，直到字串達到我們指定的長度</mark>。套用在題目上的話會變成：</p>\n</li>\n</ol>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#BFBDB6\">console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">output</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">padEnd</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#D2A6FF\">20</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#AAD94C\"> ''</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#FF8F40\">}${</span><span style=\"color:#AAD94C\">'✅'</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">repeat</span><span style=\"color:#BFBDB6\">(i </span><span style=\"color:#F29668\">+</span><span style=\"color:#D2A6FF\"> 1</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">//userName              ✅</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">//someVariable          ✅✅</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">//calculateAge          ✅✅✅</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>📝 <strong>備註</strong></p>\n<p>在 output 的長度達到 20 以前，會不斷填充空白字元，如此一來最後 <code>output.lenght</code> 的結果皆會等於 20。（與之相對應的也有 <code>padStart</code> 方法，將重複的字符填充在最前面，可以到 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\">MDN</a> 網站上看更詳細的說明。）</p>\n</blockquote>\n<p>再利用 <code>repeat()</code> 方法重複印出 ✅ Emoji，就大功告成囉～ 完整的程式碼如下：</p>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#BFBDB6\">document</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">querySelector</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'button'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">addEventListener</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'click'</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#FF8F40\"> function</span><span style=\"color:#BFBDB6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">  const</span><span style=\"color:#BFBDB6\"> text </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> document</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">querySelector</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'textarea'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#F29668\">.</span><span style=\"color:#BFBDB6\">value</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">  const</span><span style=\"color:#BFBDB6\"> rows </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> text</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">split</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'</span><span style=\"color:#95E6CB\">\\n</span><span style=\"color:#AAD94C\">'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">  console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(rows)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">  for</span><span style=\"color:#BFBDB6\"> (</span><span style=\"color:#FF8F40\">const</span><span style=\"color:#BFBDB6\"> [i</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> row] </span><span style=\"color:#F29668\">of</span><span style=\"color:#BFBDB6\"> rows</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">entries</span><span style=\"color:#BFBDB6\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    const</span><span style=\"color:#BFBDB6\"> [first</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> second] </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> row</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">toLowerCase</span><span style=\"color:#BFBDB6\">()</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">trim</span><span style=\"color:#BFBDB6\">()</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">split</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'_'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    </span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    const</span><span style=\"color:#BFBDB6\"> output </span><span style=\"color:#F29668\">=</span><span style=\"color:#AAD94C\"> `</span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">first</span><span style=\"color:#FF8F40\">}${</span><span style=\"color:#BFBDB6\">second</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">replace</span><span style=\"color:#BFBDB6\">(</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      second[</span><span style=\"color:#D2A6FF\">0</span><span style=\"color:#BFBDB6\">]</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> </span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      second[</span><span style=\"color:#D2A6FF\">0</span><span style=\"color:#BFBDB6\">]</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">toUpperCase</span><span style=\"color:#BFBDB6\">()</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      )</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">      console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">output</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">padEnd</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#D2A6FF\">20</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#AAD94C\"> ' '</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#FF8F40\">}${</span><span style=\"color:#AAD94C\">'✅'</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">repeat</span><span style=\"color:#BFBDB6\">(i </span><span style=\"color:#F29668\">+</span><span style=\"color:#D2A6FF\"> 1</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">  }</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">})</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"結語\">結語</h2>\n<p>以上簡短說明今天的練習題以及其中用到的小技巧！</p>\n<p>覺得自己寫文章的速度還是太慢了，希望未來能夠邊思考、整理思緒，一邊產出文章，才不會花太多時間在經營部落格上面。畢竟初衷是發表文章當作筆記，能夠好好練習程式碼的運用才是最重要的。</p>\n<hr>\n<p>Reference：</p>\n<blockquote>\n<p><a href=\"https://www.fooish.com/javascript/string/split.html\">JavaScript String split() (字串切割)</a></p>\n<p><a href=\"https://bobbyhadz.com/blog/javascript-typeerror-trim-is-not-a-function\">TypeError: trim is not a function in JavaScript[Solved]</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String\">字串 - JavaScript | MDN</a> - 查看更多字串的跳脫符號</p>\n</blockquote>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>有任何想法想分享或協助勘誤，歡迎留言交流指教！🦀</span></span>\n<span class=\"line\"><span></span></span></code></pre>";

				const frontmatter = {"title":"Daily Notes 1：String in Modern JS","pubDate":"2024-03-03T00:00:00.000Z","tags":["JavaScript"],"categories":["Frontend","JavaScript"]};
				const file = "/Users/millieqiu/MillieDev/millie-blog/src/content/posts/frontend-daily-note-1.md";
				const url = undefined;
				function rawContent() {
					return "\n我目前加強 JavaScript 基礎的方式是 Udemy 上一堂由 Jonas Schmedtmann 老師開授的 [The Complete JavaScript Course 2023: From Zero to Expert!](https://www.udemy.com/course/the-complete-javascript-course/)。\n\n當時有趁著打折購入這門課，真的覺得很超值，老師將觀念講解得很詳細，對於課程編排（例如哪個部份應該先上、哪個部份的觀念要留到後面的章節再詳細補強）也有一套自己的原則，更新教學內容也很頻繁，因此不用擔心觀念落後的問題，我個人上得蠻開心的 XD\n\n推薦給對自己的英文能力有信心、不會聽到睡著，或想嘗試看看全英語授課的朋友囉～🙌\n\n---\n\n## 題目說明\n\n今天做了一份老師在章節中穿插的 Coding Challenge，題目是將底下的格式的字串轉換成小駝峰 (low camel case) 格式，加上 ✅ Emoji，並移除每一列中不必要的空白字元：\n\n```plaintext\nUSer_nAme\nSome_Variable\n  calculate_AGE\n----------------------\n// 轉換成\nuserName       ✅\nsomeVariables  ✅✅\ncalculateAge   ✅✅✅\n```\n\n這份練習的目的是為了讓我們更熟練運用 String Methods，來看一下這題的解法以及我學到的東西。\n\n## 解題方法\n\n1. 將整段字串依題目要求貼到 Textarea 裡，再分別取出每一列的內容，因此需要認識換行符號 `\\n` 及 `split()` 方法。\n\n```javascript\nconst text = document.querySelector('textarea').value;\nconst rows = text.split('\\n');\nconsole.log(rows);\n// ['USer_nAme', 'Some_Variable', '  calculate_AGE']\n```\n\n`split()` 的基本語法：\n\n`str.split([separator[, limit]])`\n\n* split() 結果返回一個**字串陣列**\n\n* 參數 limit 是非必要的，表示最多返回幾個分隔字串\n\n* seperator 參數用來指定分隔符號\n\n2. 利用 `for..of` loop 讀取陣列中的每個元素，再透過 `toLowerCase()`、`trim()` 等方法整理格式。\n\n    當收到字串型態的資料時，通常會先透過 `toLowerCase` 將之轉換成小寫，能夠方便我們進行後續的整理；而 `trim()` 方法能夠幫助我們移除字串中不必要的空白字元。\n\n    到這個步驟為止，我們已經能成功將 Textarea 中的原始資料轉換成小駝峰格式了🎉！\n\n```javascript\nfor (const [i, row] of rows.entries()) {\n    const [first, second] = row.toLowerCase().trim().split('_'); //解構賦值\n    \n    const output = `${first}${second.replace(\n      second[0], \n      second[0].toUpperCase()\n      )}`;\n\n      console.log(output);\n  }\n// userName\n// someVariable\n// calculateAge\n```\n\n3. 最後，還需要在每一列尾加上 ✅ 的 Emoji，數量需隨著每列元素遞增，且可以發現每列的 Emoji 都會在同樣的位置長出來。\n\n    我們要先讓前面的小駝峰字串都達到一樣的長度，聽起來有點抽象，但只要用 `padEnd()` 方法就能實現。\n\n    > The `padEnd()` method of String values pads this string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of this string. - [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd)\n\n    簡單來說，<mark>這個方法會幫助我們在字串末端填充特定的字符，直到字串達到我們指定的長度</mark>。套用在題目上的話會變成：\n\n```javascript\nconsole.log(`${output.padEnd(20, '')}${'✅'.repeat(i + 1)}`);\n//userName              ✅\n//someVariable          ✅✅\n//calculateAge          ✅✅✅\n```\n\n> 📝 **備註**\n>\n> 在 output 的長度達到 20 以前，會不斷填充空白字元，如此一來最後 `output.lenght` 的結果皆會等於 20。（與之相對應的也有 `padStart` 方法，將重複的字符填充在最前面，可以到 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/padStart) 網站上看更詳細的說明。）\n\n再利用 `repeat()` 方法重複印出 ✅ Emoji，就大功告成囉～ 完整的程式碼如下：\n\n```javascript\ndocument.querySelector('button').addEventListener('click', function() {\n  const text = document.querySelector('textarea').value;\n  const rows = text.split('\\n');\n\n  console.log(rows);\n\n  for (const [i, row] of rows.entries()) {\n    const [first, second] = row.toLowerCase().trim().split('_');\n    \n    const output = `${first}${second.replace(\n      second[0], \n      second[0].toUpperCase()\n      )}`;\n\n      console.log(`${output.padEnd(20, ' ')}${'✅'.repeat(i + 1)}`);\n  }\n})\n```\n\n## 結語\n\n以上簡短說明今天的練習題以及其中用到的小技巧！\n\n覺得自己寫文章的速度還是太慢了，希望未來能夠邊思考、整理思緒，一邊產出文章，才不會花太多時間在經營部落格上面。畢竟初衷是發表文章當作筆記，能夠好好練習程式碼的運用才是最重要的。\n\n---\n\nReference：\n\n> [JavaScript String split() (字串切割)](https://www.fooish.com/javascript/string/split.html)\n>\n> [TypeError: trim is not a function in JavaScript\\[Solved\\]](https://bobbyhadz.com/blog/javascript-typeerror-trim-is-not-a-function)\n>\n> [字串 - JavaScript | MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String) - 查看更多字串的跳脫符號\n\n```plaintext\n有任何想法想分享或協助勘誤，歡迎留言交流指教！🦀\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"題目說明","text":"題目說明"},{"depth":2,"slug":"解題方法","text":"解題方法"},{"depth":2,"slug":"結語","text":"結語"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
