import { f as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro_CAHbMDKa.mjs';

const html = "<p>本篇文章是我在 Udemy 上加強 JavaScript 基礎的學習筆記。<br>\n這兩小節的課程中，老師先介紹了「First-class Function」以及「Higher-order Function」的差別，接著再舉一段簡單的程式碼範例讓我們了解什麼是 <strong>Callback function</strong>。</p>\n<hr>\n<h1 id=\"first-class-function\">First-class Function</h1>\n<p>JavaScript 是擁有 First-class Function（一級函式）特性的程式語言。</p>\n<ul>\n<li>\n<p>JS 將 function 當作一等公民</p>\n</li>\n<li>\n<p>將 function 視為是一種「值」（Value）</p>\n</li>\n<li>\n<p>function 是一種物件型態的資料（<code>typeOf function</code> = Object）</p>\n</li>\n</ul>\n<p>由於上面特殊的定義，我們也可以對 function 做許多對其他資料型別的變數也可以操作的行為，包含：</p>\n<ol>\n<li>\n<p>將函式儲存成變數（透過 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">Function Expressions</a>）</p>\n</li>\n<li>\n<p>將函式儲存成一種物件的方法（Method）</p>\n</li>\n</ol>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#BFBDB6\"> counter </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> {</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    value</span><span style=\"color:#BFBDB6B3\">:</span><span style=\"color:#D2A6FF\"> 23</span><span style=\"color:#BFBDB6\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    inc: </span><span style=\"color:#FF8F40\">function</span><span style=\"color:#BFBDB6\">() {</span><span style=\"color:#39BAE6;font-style:italic\">this</span><span style=\"color:#F29668\">.</span><span style=\"color:#BFBDB6\">value </span><span style=\"color:#F29668\">++</span><span style=\"color:#BFBDB6\">}</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<ol start=\"3\">\n<li>\n<p>將 function 當作參數代入另一個函式中（最簡單的例子就是 <code>addEventListener</code>）</p>\n</li>\n<li>\n<p>可以在一個 function 中回傳（return）另一個 function</p>\n</li>\n<li>\n<p>擁有 function 自己的方法（例如 <code>bind</code>）</p>\n</li>\n</ol>\n<p>也是因為 First-class Function 的特性，才讓我們能創造出並使用<strong>高階函式（Higher-Order Function）</strong>。</p>\n<h1 id=\"higher-order-function\">Higher-Order Function</h1>\n<p>高階函式（Higher order function）是指當<mark>一個函式可以接受另一個函式作為參數</mark>或者<mark>返回一個函式作為結果的函式</mark>。</p>\n<p>第一個情況，我們以事件偵聽的例子（🌰）來說明：</p>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#FFB454\"> greet</span><span style=\"color:#F29668\"> =</span><span style=\"color:#BFBDB6\"> () </span><span style=\"color:#FF8F40\">=></span><span style=\"color:#BFBDB6\"> console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'Hello!'</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">btn</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">addEventListener</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'click'</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> greet)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>在上述的程式碼中，<code>addEventListener</code> 接收了 <code>greet</code> 函式作為參數，由此可知它就是所謂的<strong>高階函式</strong>；而 <code>greet</code> 函式則是我們後續會提到的 <strong>回呼函式</strong>（Callback Function）。</p>\n<blockquote>\n<p>💡 <strong>提示</strong></p>\n<p>所謂的「Callback function」其實就是「把函式當作另一個函式（Higher-order Function）的參數，透過另一個函式來呼叫它」。</p>\n</blockquote>\n<p>第二種情況的範例程式碼如下：</p>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF8F40\">function</span><span style=\"color:#FFB454\"> count</span><span style=\"color:#BFBDB6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    let</span><span style=\"color:#BFBDB6\"> counter </span><span style=\"color:#F29668\">=</span><span style=\"color:#D2A6FF\"> 0</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    return</span><span style=\"color:#FF8F40\"> function</span><span style=\"color:#BFBDB6\">() {</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">        counter</span><span style=\"color:#F29668\">++</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    }</span><span style=\"color:#AAD94C\">''</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>其中 <code>count</code> 函式就是 Higher-order function，而被 return 的函式則是所謂的 <strong>Returned function</strong>。不過 Returned function 的用法又更進階了，目前在這個小節並沒有被提到，會在其他篇作補充。</p>\n<p>看到這裡，有些人可能會疑惑，「First-class function」跟「Higher-order function」聽起來很類似，難道它們不是同一件事嗎？</p>\n<p>答案是…NO ❌！</p>\n<p>First-class function 只是<strong>一個特性</strong>，代表「Function 是一個 Value」這個概念。不只 JS ，其他像是 Go、Python 等語言也都支持這個特性。</p>\n<p>然而 Higher-order function 則是在實際的程式碼中會出現的一種函式，而能夠實現這類函式的原因，就歸功於前面提到過的 First-class function 的存在。</p>\n<hr>\n<h1 id=\"callback-function\">Callback Function</h1>\n<p>以下用一段簡單的程式碼來帶大家瞭解什麼是「Callback function」：</p>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// 將字串的第一個單字轉換成大寫</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#FFB454\"> upperFirstWord</span><span style=\"color:#F29668\"> =</span><span style=\"color:#FF8F40\"> function</span><span style=\"color:#BFBDB6\"> (</span><span style=\"color:#D2A6FF\">str</span><span style=\"color:#BFBDB6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    const</span><span style=\"color:#BFBDB6\"> [first</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#F29668\"> ...</span><span style=\"color:#BFBDB6\">others] </span><span style=\"color:#F29668\">=</span><span style=\"color:#BFBDB6\"> str</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">split</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">' '</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">    return</span><span style=\"color:#BFBDB6\"> [first</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">toUpperCase</span><span style=\"color:#BFBDB6\">()</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#F29668\"> ...</span><span style=\"color:#BFBDB6\">others]</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">join</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">' '</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// Higher-order function</span></span>\n<span class=\"line\"><span style=\"color:#FF8F40\">const</span><span style=\"color:#FFB454\"> transformer</span><span style=\"color:#F29668\"> =</span><span style=\"color:#FF8F40\"> function</span><span style=\"color:#BFBDB6\"> (</span><span style=\"color:#D2A6FF\">str</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#D2A6FF\"> fn</span><span style=\"color:#BFBDB6\">) {</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">`Original string: </span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">str</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">`Transformed string: </span><span style=\"color:#FF8F40\">${</span><span style=\"color:#FFB454\">fn</span><span style=\"color:#BFBDB6\">(str)</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">    console</span><span style=\"color:#F29668\">.</span><span style=\"color:#FFB454\">log</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">`Transformed by: </span><span style=\"color:#FF8F40\">${</span><span style=\"color:#BFBDB6\">fn</span><span style=\"color:#F29668\">.</span><span style=\"color:#BFBDB6\">name</span><span style=\"color:#FF8F40\">}</span><span style=\"color:#AAD94C\">`</span><span style=\"color:#BFBDB6\">)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"><span style=\"color:#BFBDB6\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// 呼叫 upperFirstWord 函式</span></span>\n<span class=\"line\"><span style=\"color:#FFB454\">transformer</span><span style=\"color:#BFBDB6\">(</span><span style=\"color:#AAD94C\">'JavaScript is the best!'</span><span style=\"color:#BFBDB6B3\">,</span><span style=\"color:#BFBDB6\"> upperFirstWord)</span><span style=\"color:#BFBDB6B3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// 列印結果：</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// Original string: JavaScript is the best!</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// Transformed string: JAVASCRIPT is the best!</span></span>\n<span class=\"line\"><span style=\"color:#ACB6BF8C;font-style:italic\">// Transformed by: upperFirstWord</span></span>\n<span class=\"line\"></span></code></pre>\n<p>在第 14 行，我們呼叫 <code>transformer()</code> 這個函式，它就是前面提到過的高階函式（Higher-order function），並在參數 fn 中代入 <code>upperFirstWord</code> 函式，也就是所謂的 Callback function。</p>\n<p>我們並沒有直接呼叫 <code>upperFirstWord()</code> 這個函式，而是將其作為參數傳遞，後續再讓 <code>transformer()</code> 函式來呼叫它。</p>\n<p>透過上面的例子，也不難發現其實 <mark>Callback function 跟一般的函式沒什麼不同，差別在於被呼叫執行的時機</mark>。</p>\n<p>在 JavaScript 的世界中，經常可以看到 Callback function 的用法。它給我們帶來以下幾點好處：</p>\n<ol>\n<li>\n<p>幫助我們能更輕鬆地將程式碼分割成「<strong>可以重複使用</strong>」（reusabel）以及「<strong>相互有關聯</strong>」（interconnected）的段落。</p>\n</li>\n<li>\n<p><strong>幫助我們實現「物件抽象化」（Abstraction）</strong>。</p>\n</li>\n</ol>\n<blockquote>\n<p>💡 <strong>提示</strong></p>\n<p>抽象化（Abstraction）是物件導向程式設計（Object-Oriented Programming）的重要概念之一。簡單來說，指的是當程式執行時，能夠隱藏另一部分程式碼背後的運作的細節。</p>\n</blockquote>\n<p>以上方的範例來看，<code>tranformer()</code> 函式在運作時，需要關注的事情就只有「能否順利將 input 中字串轉換成我們需要的格式」，因此並不在乎背後複雜的機制是如何將字串轉換成大寫的。</p>\n<p>在這邊先大略提一個概念，剩下的細節會在老師後面教到「物件導向程式語言」時再回來補充。</p>\n<p>不過需要注意的是，若 Callback function 的設計及使用不當，讓函式之間的相依過深，callback 多層之後產生的「波動拳」就會難以維護，形成所謂的「Callback hell」。</p>\n<p><img src=\"/src/images/callback-hell.jpeg\" alt=\"Callback Hell Image\"></p>\n<p>可以說 Callback function 會是 JS 課程中數一數二重要的單元，老師在章節的末尾千交代萬囑咐一定要好好釐清當中的觀念，也是我這次覺得提筆做筆記的原因～✏</p>\n<p>希望這篇文能夠幫助到跟我一樣剛在學習的人，快速建立一個觀念，背後還有很多複雜的機制跟原理，就讓大家自行去挖掘囉！</p>\n<hr>\n<p>Reference：</p>\n<blockquote>\n<p><a href=\"https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html\">[筆記] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式）</a> <br>\n<a href=\"https://www.casper.tw/development/2020/09/24/first-class-function/\">JavaScript 一級函式 （First Class Functions）</a> <br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10192739\">重新認識 JavaScript: Day 18Callback Function 與 IIFE</a></p>\n</blockquote>\n<pre class=\"astro-code ayu-dark\" style=\"background-color:#0b0e14;color:#bfbdb6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>有任何想法想分享或協助勘誤，歡迎留言交流指教！🏹</span></span>\n<span class=\"line\"><span></span></span></code></pre>";

				const frontmatter = {"title":"Daily notes 2：什麼是 Callback function？","pubDate":"2024-03-04T00:00:00.000Z","tags":["JavaScript"],"categories":["Frontend"]};
				const file = "/Users/millieqiu/MillieDev/millie-blog/src/content/posts/frontend-daily-note-2.md";
				const url = undefined;
				function rawContent() {
					return "\n本篇文章是我在 Udemy 上加強 JavaScript 基礎的學習筆記。  \n這兩小節的課程中，老師先介紹了「First-class Function」以及「Higher-order Function」的差別，接著再舉一段簡單的程式碼範例讓我們了解什麼是 **Callback function**。\n\n---\n\n# First-class Function\n\nJavaScript 是擁有 First-class Function（一級函式）特性的程式語言。\n\n* JS 將 function 當作一等公民\n\n* 將 function 視為是一種「值」（Value）\n\n* function 是一種物件型態的資料（`typeOf function` = Object）\n\n由於上面特殊的定義，我們也可以對 function 做許多對其他資料型別的變數也可以操作的行為，包含：\n\n1. 將函式儲存成變數（透過 [Function Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function)）\n\n2. 將函式儲存成一種物件的方法（Method）\n\n```javascript\nconst counter = {\n    value: 23;\n    inc: function() {this.value ++}\n}\n```\n\n3. 將 function 當作參數代入另一個函式中（最簡單的例子就是 `addEventListener`）\n\n4. 可以在一個 function 中回傳（return）另一個 function\n\n5. 擁有 function 自己的方法（例如 `bind`）\n\n也是因為 First-class Function 的特性，才讓我們能創造出並使用**高階函式（Higher-Order Function）**。\n\n# Higher-Order Function\n\n高階函式（Higher order function）是指當<mark>一個函式可以接受另一個函式作為參數</mark>或者<mark>返回一個函式作為結果的函式</mark>。\n\n第一個情況，我們以事件偵聽的例子（🌰）來說明：\n\n```javascript\nconst greet = () => console.log('Hello!');\nbtn.addEventListener('click', greet);\n```\n\n在上述的程式碼中，`addEventListener` 接收了 `greet` 函式作為參數，由此可知它就是所謂的**高階函式**；而 `greet` 函式則是我們後續會提到的 **回呼函式**（Callback Function）。\n\n> 💡 **提示**\n>\n> 所謂的「Callback function」其實就是「把函式當作另一個函式（Higher-order Function）的參數，透過另一個函式來呼叫它」。\n\n第二種情況的範例程式碼如下：\n\n```javascript\nfunction count() {\n    let counter = 0;\n    return function() {\n        counter++;\n    }''\n}\n```\n\n其中 `count` 函式就是 Higher-order function，而被 return 的函式則是所謂的 **Returned function**。不過 Returned function 的用法又更進階了，目前在這個小節並沒有被提到，會在其他篇作補充。\n\n看到這裡，有些人可能會疑惑，「First-class function」跟「Higher-order function」聽起來很類似，難道它們不是同一件事嗎？\n\n答案是......NO ❌！\n\nFirst-class function 只是**一個特性**，代表「Function 是一個 Value」這個概念。不只 JS ，其他像是 Go、Python 等語言也都支持這個特性。\n\n然而 Higher-order function 則是在實際的程式碼中會出現的一種函式，而能夠實現這類函式的原因，就歸功於前面提到過的 First-class function 的存在。\n\n---\n\n# Callback Function\n\n以下用一段簡單的程式碼來帶大家瞭解什麼是「Callback function」：\n\n```javascript\n// 將字串的第一個單字轉換成大寫\nconst upperFirstWord = function (str) {\n    const [first, ...others] = str.split(' ');\n    return [first.toUpperCase(), ...others].join(' ');\n}\n\n// Higher-order function\nconst transformer = function (str, fn) {\n    console.log(`Original string: ${str}`);\n    console.log(`Transformed string: ${fn(str)}`);\n    console.log(`Transformed by: ${fn.name}`);\n}\n\n// 呼叫 upperFirstWord 函式\ntransformer('JavaScript is the best!', upperFirstWord);\n\n// 列印結果：\n// Original string: JavaScript is the best!\n// Transformed string: JAVASCRIPT is the best!\n// Transformed by: upperFirstWord\n```\n\n在第 14 行，我們呼叫 `transformer()` 這個函式，它就是前面提到過的高階函式（Higher-order function），並在參數 fn 中代入 `upperFirstWord` 函式，也就是所謂的 Callback function。\n\n我們並沒有直接呼叫 `upperFirstWord()` 這個函式，而是將其作為參數傳遞，後續再讓 `transformer()` 函式來呼叫它。\n\n透過上面的例子，也不難發現其實 <mark>Callback function 跟一般的函式沒什麼不同，差別在於被呼叫執行的時機</mark>。\n\n在 JavaScript 的世界中，經常可以看到 Callback function 的用法。它給我們帶來以下幾點好處：\n\n1. 幫助我們能更輕鬆地將程式碼分割成「**可以重複使用**」（reusabel）以及「**相互有關聯**」（interconnected）的段落。\n\n2. **幫助我們實現「物件抽象化」（Abstraction）**。\n\n> 💡 **提示**\n>\n> 抽象化（Abstraction）是物件導向程式設計（Object-Oriented Programming）的重要概念之一。簡單來說，指的是當程式執行時，能夠隱藏另一部分程式碼背後的運作的細節。\n\n以上方的範例來看，`tranformer()` 函式在運作時，需要關注的事情就只有「能否順利將 input 中字串轉換成我們需要的格式」，因此並不在乎背後複雜的機制是如何將字串轉換成大寫的。\n\n在這邊先大略提一個概念，剩下的細節會在老師後面教到「物件導向程式語言」時再回來補充。\n\n不過需要注意的是，若 Callback function 的設計及使用不當，讓函式之間的相依過深，callback 多層之後產生的「波動拳」就會難以維護，形成所謂的「Callback hell」。\n\n![Callback Hell Image](/src/images/callback-hell.jpeg)\n\n可以說 Callback function 會是 JS 課程中數一數二重要的單元，老師在章節的末尾千交代萬囑咐一定要好好釐清當中的觀念，也是我這次覺得提筆做筆記的原因～✏\n\n希望這篇文能夠幫助到跟我一樣剛在學習的人，快速建立一個觀念，背後還有很多複雜的機制跟原理，就讓大家自行去挖掘囉！\n\n---\n\nReference：\n\n> [\\[筆記\\] JavaScript 中函式就是一種物件 ─ 談談 first class function（一等公民函式）](https://pjchender.blogspot.com/2016/03/javascriptfunctionobjects.html) <br>\n> [JavaScript 一級函式 （First Class Functions）](https://www.casper.tw/development/2020/09/24/first-class-function/) <br>\n> [重新認識 JavaScript: Day 18Callback Function 與 IIFE](https://ithelp.ithome.com.tw/articles/10192739)\n\n```plaintext\n有任何想法想分享或協助勘誤，歡迎留言交流指教！🏹\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"first-class-function","text":"First-class Function"},{"depth":1,"slug":"higher-order-function","text":"Higher-Order Function"},{"depth":1,"slug":"callback-function","text":"Callback Function"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
